apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "payment-service.fullname" . }}
  labels:
    {{- include "payment-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "payment-service.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        {{- include "payment-service.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: SPRING_CONFIG_LOCATION
              value: "classpath:/application.yml,/config/application.yml"
            - name: SERVER_PORT
              value: "{{ .Values.config.port }}"
            - name: SPRING_PROFILES_ACTIVE
              value: "{{ .Values.config.profile }}"
            - name: LOGGING_LEVEL_ROOT
              value: "{{ .Values.config.loggingLevel }}"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.config.databaseHost }}:{{ .Values.config.databasePort }}/{{ .Values.config.databaseName }}"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: payment-secrets
                  key: DATABASE_USER
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: payment-secrets
                  key: DATABASE_PASSWORD
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "{{ .Values.config.kafkaBootstrapServers }}"
            - name: PG_API_KEY
              valueFrom:
                secretKeyRef:
                  name: payment-secrets
                  key: PG_API_KEY
            - name: PG_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: payment-secrets
                  key: PG_SECRET_KEY
          volumeMounts:
            - name: config-volume
              mountPath: /config
          resources:
            {{- toYaml .Values.resources | nindent 10 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: payment-config
            items:
              - key: application.yml
                path: application.yml